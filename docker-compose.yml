services:
  # Database for Clients Service
  clients-db:
    image: postgres:15
    container_name: microcommerce-clients-db
    environment:
      POSTGRES_DB: clients_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - clients_data:/var/lib/postgresql/data
      - ./microcommerce-clients/docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d clients_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database for Orders Service
  orders-db:
    image: postgres:15
    container_name: microcommerce-orders-db
    environment:
      POSTGRES_DB: orders_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - orders_data:/var/lib/postgresql/data
      - ./microcommerce-orders/docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d orders_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database for Products Service
  products-db:
    image: postgres:15
    container_name: microcommerce-products-db
    environment:
      POSTGRES_DB: products_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - products_data:/var/lib/postgresql/data
      - ./microcommerce-products/docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d products_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: microcommerce-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: microcommerce-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: microcommerce-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092

  # Database Admin Tool
  adminer:
    image: adminer
    container_name: microcommerce-adminer
    ports:
      - "8080:8080"
    depends_on:
      - clients-db
      - products-db
      - orders-db

volumes:
  clients_data:
  products_data:
  orders_data:
